#!/usr/bin/env ruby
# encoding: utf-8

#     SeqTrimBB: Next generation sequencing preprocessor
#     Copyright (C) <2017>
#     Authors: Rafael Nu√±ez Serrano, Diego Dario Guerrero 
#              Fernandez

#     email: soporte@scbi.uma.es - http://www.scbi.uma.es

###############################################################################
# FINDS
###############################################################################

ROOT_PATH = File.dirname(__FILE__)
SEQTRIM_PATH = File.join(ROOT_PATH,'..')

# Finds classes in 'lib' folder
$: << File.expand_path(File.join(SEQTRIM_PATH,'lib'))
# Finds classes in 'seqtrimbb' folder
$: << File.expand_path(File.join(SEQTRIM_PATH,'lib','seqtrimbb'))
# Finds classes in 'classes' folder
$: << File.expand_path(File.join(SEQTRIM_PATH,'lib','seqtrimbb','classes'))
# Finds classes in 'classes/databases_support' folder
$: << File.expand_path(File.join(SEQTRIM_PATH,'lib','seqtrimbb','classes','databases_support'))
# Finds classes in 'classes/params' folder
$: << File.expand_path(File.join(SEQTRIM_PATH,'lib','seqtrimbb','classes','params'))
# Finds classes in 'plugins' folder
$: << File.expand_path(File.join(SEQTRIM_PATH,'lib','seqtrimbb','plugins'))

###############################################################################
# METHODS
###############################################################################

# Decamelize strings
class String  
   def decamelize 
           self.to_s. 
                   gsub(/([A-Z\d]+)([A-Z][a-z])/, '\1_\2'). 
                   gsub(/([a-z]+)([A-Z\d])/, '\1_\2'). 
                   gsub(/([A-Z]{2,})(\d+)/i, '\1_\2'). 
                   gsub(/(\d+)([a-z])/i, '\1_\2'). 
                   gsub(/(.+?)\&(.+?)/, '\1_&_\2'). 
                   gsub(/\s/, '_').downcase 
   end
end

# Slice hashes (extract a subhash)
class Hash
   def slice(*keys)
           ::Hash[[keys, self.values_at(*keys)].transpose]
   end
   def except(*keys)
           dup.except!(*keys)
   end
   def except!(*keys)
           keys.each { |key| delete(key) }
           self
   end
end

#Check external requirements. Takes a external call, and test if it can execute
def check_external_requirements(req,req_call,source_url,version=nil)
     #Checks if external requirement is present
       begin
               cmd = IO.popen(req_call)
       rescue
               STDERR.puts "Unable to find external requirement: #{req}\nYou can download it from #{source_url}"
               exit (-1)
       end
     #Checks version
       if !version.nil?
             #Extract version 
               version_from_cmd = cmd.read.split("\n")[0].gsub(/\D/,'').to_i
               if version_from_cmd < version.to_s.gsub(/\D/,'').to_i
                       STDERR.puts "Detected an old #{req} version. An updated is required."
                       exit(-1)
               end
       end
       cmd.close

end

#Check for previous execution (looks for outputs folder/s existence)
def check_previous_execution(output_folders,force_execution)

   # test each folder existence
       output_folders.each do |folder|
               if Dir.exist?(folder)
                       msg = "Output folder #{folder} already exists. "
                       if force_execution
                             msg << "Force execution parameter is set to true. Removing #{folder}"
                             STDERR.puts "WARNING. " + msg
                             FileUtils.rm_rf(folder)
                       else
                             msg << "To retry, remove it or add --force_execution parameter to the command line."
                             STDERR.puts "ERROR. " + msg
                             exit(-1)
                       end
               end
       end

end

###############################################################################
# REQUIRE
###############################################################################

require 'seqtrimbb'
require 'fileutils'
require 'optparse'
require 'json'
require 'zlib'
require 'params'
require 'database_support_handler'
require 'plugin'
require 'plugin_manager'
require 'bbtools'

###############################################################################
# WORKING PATHS AND HEADER
###############################################################################

#temp output path
OUTPUT_PATH = File.expand_path('output_files_tmp')
#If there is a BBDB environment var (databases location), then use it
if ENV['BBDB']
       db_path = ENV['BBDB']
else # otherwise use SEQTRIM_PATH + DB
       db_path = File.expand_path(File.join(SEQTRIM_PATH, "DB"))
end
#First checks if BBtools is installed, then set a BBtools path. If there is a BBTOOLS_PATH environment var, then use it
check_external_requirements('BBtools','bbversion.sh',"http://sourceforge.net/projects/bbmap/","37.53")
if ENV['BBTOOLS_PATH']
       bb_path = ENV['BBTOOLS_PATH']
else # otherwise use the result of which bbmap.sh
       bb_path  = File.expand_path(File.dirname(%x[which bbmap.sh]))
end
#Puts header
STDERR.puts "SeqTrimBB version #{Seqtrimbb::SEQTRIM_VERSION}"
STDERR.puts "###############################################"
STDERR.puts " - Command: #{$0}"
STDERR.puts " - SeqtrimBB path: #{SEQTRIM_PATH}"
STDERR.puts " - BBtools version #{bb_version}"
STDERR.puts " - BBTools path: #{bb_path}"

###############################################################################
# OPTIONS PARSING
###############################################################################

# Reads the parameters from console. For this is used ARGV, that is an array.
options = OptionsParserSTBB.parse(ARGV)
# Print options from input
STDERR.puts " - Using options: \n"+ JSON::pretty_generate(options))

###############################################################################
# INIT BBTOOLS
###############################################################################

bbtools = BBtools.new(bb_path)

###############################################################################
# GENERAL CHECK POINTS
###############################################################################

## Works related to internal databases

# First initialize DatabasesSupport object
stbb_databases = DatabasesSupportHandler.new(options[:workers],db_path,bbtools)
# Second initialize(load) internal databases info
stbb_databases.init_internal(options.slice(:databases_action,:databases_list))
# OPT: list databases
if options[:list_db]
     # List database entries in a database
       stbb_databases.list_databases(options[:list_db_name])
       exit(-1)
end
# DATABASES MAINTENANCE (If its needed or requested. Build databases structure, install databases, check and update index)
stbb_databases.maintenance_internal(options.slice(:install_db,:install_db_name,:check_db))

# SAVING DATABASES INFO JSON
stbb_databases.save_json(stbb_databases.info,File.join(db_path,'status_info','databases_status_info.json')) if stbb_databases.save?

## Checks for required options
if (ARGV.count != 0) || ([:file,:template].map { |opt| options[opt].empty? }.any?) 
       STDERR.puts "To preprocess a sample you must provide all required options (input file:-Q,template:-t).\n"
       puts OptionParserSTBB.help
       exit(-1)
end
## Checks for a previous execution!
check_previous_execution([OUTPUT_PATH,options[:final_output_path]],options[:force_execution])

###############################################################################
# LOAD PARAMS
###############################################################################

# Reads parameters from template
STDERR.puts "Reading params"
STDERR.puts "Using params file: #{options[:template]}"
# Initialize params object and load params from template and options
params = Params.new(options,bbtools)

# Finally checks plugin_list param. If it fails, exit.
params.check_param(pl_error = [],'plugin_list','PluginList',nil,'Plugins applied to every sequence, separated by commas. Order is important')
if !pl_error.empty?
       STDERR.puts pl_error
       exit(-1)
end
# Make working directory and subdirectories
if File.writable?(File.dirname(OUTPUT_PATH))
       [OUTPUT_PATH,File.join(OUTPUT_PATH,'plugins_logs')].map{ |d| Dir.mkdir(d) if !Dir.exist?(d) }
else
       STDERR.puts "Error in writing permissions. Impossible to make output folder: #{OUTPUT_PATH}."
       exit(-1)
end

###############################################################################
# INITIAL STATS
###############################################################################
check_external_requirements('FastQC','fastqc -v',"http://www.bioinformatics.babraham.ac.uk/projects/fastqc/")

# Extract initial global stats
if params.exist?('generate_initial_stats') && params.get_param('generate_initial_stats').to_s=='true'
       STDERR.puts "Calculating initial stats: i.e. FastQC"
# fastqc cmd 
       Dir.mkdir(File.join(OUTPUT_PATH,'initial_stats'))
       cmd="fastqc -q -o #{File.join(OUTPUT_PATH,'initial_stats')} -t #{params.get_param('workers')} #{params.get_param('file').join(" ")}"
       system(cmd)
else
       STDERR.puts "Skipping calculating initial stats phase."
end

###############################################################################
# MAIN WORK
###############################################################################

# Exit status
exit_status = 0

# load plugin_list
plugin_list = params.get_param('plugin_list')
STDERR.puts "Loading plugins: [#{plugin_list}]"

# Initialize plugins manager
plugin_manager = PluginManager.new(plugin_list,params,bbtools,stbb_db)

# load and check plugins params
STDERR.puts "Loading and checking plugins params"
if !plugin_manager.check_plugins_params
       STDERR.puts "Plugin check failed"
    # save used params to file
       params.save_file(File.join(OUTPUT_PATH,'used_params.txt'))
       exit(-1)
end

# EXECUTE PLUGINS:
plugin_manager.execute_plugins
STDERR.puts "Plugin_results=#{plugin_manager.plugin_results.each { |plugin| plugin['cmd'] }.join("\n")}"

# Pipe! plugins and launch cmd
cmd_to_execute = plugin_manager.pipe!
STDERR.puts "CMD_TO_EXECUTE:\n#{cmd_to_execute}"
STDERR.puts "Initializing cleaning process..."
##LAUNCH
STDERR.puts "Cleaning reads!"
system(cmd_to_execute)
STDERR.puts "...Finalizing cleaning process..."

# Storing all plugins stats and error checking
stats = plugin_manager.extract_stats
# Saving stats
File.open("#{OUTPUT_PATH}/stats.json","w") do |f|
       f.write(JSON.pretty_generate(stats))
end

###############################################################################
# FINAL STATS
###############################################################################

# Extract initial global stats
if params.exist?('generate_final_stats') && params.get_param('generate_initial_stats').to_s=='true'
       STDERR.puts "Calculating initial stats: i.e. FastQC"
# fastqc cmd 
       Dir.mkdir(File.join(OUTPUT_PATH,'final_stats'))
       cmd="fastqc -q -o #{File.join(OUTPUT_PATH,'final_stats')} -t #{params.get_param('workers')} #{params.get_param('outputfile').join(" ")}"
       system(cmd)
else
       STDERR.puts "Skipping calculating initial stats phase."
end


###############################################################################
# REPORT
###############################################################################

#generate report

#if !options[:skip_report] && system("which generate_report.rb > /dev/null ")
#  cmd="generate_report.rb #{OUTPUT_PATH} 2> report_generation_errors.log"
 # $LOG.info "Generating report #{cmd}"
  # `#{cmd}`
#else
 # skip_text=','
  #if options[:skip_report]
   # skip_text=' and remove the -R option from the command line.'
  #end

  #$LOG.info "If you want a detailed report in PDF format, be sure you have installed the optional seqtrimbb_report gem (gem install seqtrimbb_report)#{skip_text}"
  #$LOG.info "Closing"
#end

###############################################################################
# EXIT
###############################################################################

#Move files to final_output_folder
FileUtils.mv OUTPUT_PATH, options[:final_output_path]
# Exiting
exit
